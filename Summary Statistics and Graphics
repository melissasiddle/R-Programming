#Clear up all objects in the current environment:
rm(list=ls())

###########################################
#Set up the R environment and read in data:
##########################################

#Setting working directory:

setwd("The path to your own working directory (folder)")

#Read in the data set stored in a CSV file (make sure 
#CSV file is in the working directory)
#Store the data set in a data frame named 'dt.groupon'
#Data frame: Used for storing data tables; each column 
#contains values of one variable and each row contains 
#one set of values from each column
dt.groupon <- read.csv("dt-groupon-purchases-all.csv")

#Structure of the data set
str(dt.groupon)

#Peek at the data
#The first 3 observations
head(dt.groupon, 3)
#The last 3 observations
tail(dt.groupon, 3)

#View the data frame like in a spreadsheet
View(dt.groupon)

###################################################
#Manipulate a data frame using the 'dplyr' package
###################################################

#If a package is used first time, you need to install it
install.packages("dplyr")

#Loading the installed package
library("dplyr")
#or equivalently,
require("dplyr")

#The 'select' funciton in package 'dplyr' selects column(s) of
#a data frame by position(s) or name(s)

#The following two lines of codes both select columns 1 - 3
#of the data frame 'dt.groupon'; the results are returened 
#as vectors and printed in the console
#The 'c()' function combines multiple vaules into one vector
#'1:n' gives a vector from 1 to n with an interval of 1
select(dt.groupon, c(1:3))
select(dt.groupon, c(Purchase, ShareLink, Deal01))

#Drop columns by using 'select' function with minus operator '-'
#To drop columns 1 to 3:
select(dt.groupon, -(1:3))

#For demonstrations, we select the following variables (columns)
#from the original data frame: 
# 1. Purchase: A respondent's stated likelihood to purchase the deal (scale 0 to 100)
# 2. ShareLink: A respondent's stated likelihood to share the deal's link on social media 
#(scale 0 to 100)
# 3. Deal01: Type of product, 1 = Restaurant, 2 = Headphone
# 4. Deal02: Requirement to login with social media account in order to purchase the deal, 
#1 = Yes, 2 = No
# 5. Deal03: Discount percentage offered by the deal, 1 = 20%, 2 = 40%, 3 = 60%, 4 = 80%
# 6. Deal04: Number of friends that should buy the deal via the shared linjk in order for the 
#focal user to get the deal for free, 1 = one friend, 2 = three friends, 3 = five friends
# 7. PQ1: Respondent's perceived product quality (measure 1, scale 0 to 7)
# 8. PQ2: Respondent's perceived product quality (measure 2, scale 0 to 7)
# 9. PQ3: Respondent's perceived product quality (measure 3, scale 0 to 7)
# 45. dGender: Gender of the respondent
# 47. IBA: Respondent in IBA or BA, 1 = BA, 2 = IBA
# 48. SatFac: Satisfaction with studying in the program, scale 0 to 100
# 49. HrPWork: Number of hours per week spent on performing paid work
# 50. HrVWork: Number of hours per week spent on performing voluntary work
# 51. HrClass: Number of hours per week spent on attening classes
# 52. HrStud: Number of hours per week spent on studying other than attending classes

#Select the above-listed columns and overwrite the original data frame
#'<-': assignment operator; assign the data after the operator to the 
#object before the command
dt.groupon <- select(dt.groupon, c(1:9, 45, 47:51))

#Based on the definitions of variables Deal01-04, we change their names 
#by using the 'rename()' functions
dt.groupon <- rename(dt.groupon, ProductType=Deal01, Login=Deal02, 
                     Discount=Deal03, Invitation=Deal04)

#Creating new variable using the function 'mutate' in package 'dplyr'
#Create a new variable, 'PQ', that has the average of the three product 
#quality measures
dt.groupon <- mutate(dt.groupon, PQ = (PQ1+PQ2+PQ3)/3)
#Drop the original three PQ variables:
dt.groupon <- select(dt.groupon, -c(PQ1, PQ2, PQ3))

##################################################
#Dealing with missing values
##################################################

#First display the observations/cases with missing values using the 
#'complete.cases()' function, which returns a vector of logical values 
#indicating which cases are complete (i.e., having no missing values)
result_complete_cases <- complete.cases(dt.groupon)
View(result_complete_cases)

#The following line of codes creates a new data frame storing all 
#observations with missing values.

#The exclamation mark in R ('!'): the NOT logical operator, which 
#negates the logical value it's used on.

#'[ ]' operator: indexing feature to access subset of elements of
#a data frame
#'data_frame_name[filter condition on rows, filter condition on columns]':
# Returns the subset of the data frame satisfiying the conditions
#When conditions are not given, all rows/columns will be selected

dt.groupon.missing <- dt.groupon[!complete.cases(dt.groupon), ]

#Look at the incomplete cases: Missing values represented by 'NA's
View(dt.groupon.missing)

#To understand how '[ ]' works, try
dt.groupon[!complete.cases(dt.groupon), c(1:3)]
dt.groupon[c(2:5), c(2:3)]
dt.groupon[, c(2:3)]

#Assume here (and also in your case assignment) that values are missing 
#at random
#Simple solution: listwise deletion 

#The following code deletes all observations with a missing value for
#at least one variable and overwrite the original data frame
dt.groupon <- dt.groupon[complete.cases(dt.groupon), ]


###########################################
###Summary Statistics
###########################################

#Summary statistics of the continuous variables: Using built-in function 'summary'
summary(dt.groupon[, c("Purchase", "ShareLink", "SatFac", "HrPWork", 
                       "HrVWork", "HrClass", "PQ")])

#Summary of the Data: using 'stargazer' package
#For first use, install the package first
install.packages("stargazer")

#Load the package
library(stargazer)

#Subset all continuous variables into another data frame
dt.groupon.continuous <- dt.groupon[, c("Purchase", "ShareLink", 
                                        "SatFac", "HrPWork", 
                                        "HrVWork", "HrClass", "PQ")]

#Get a descriptive table with all continuous variables
stargazer(dt.groupon.continuous, type="text")

#Add more statistics to the table: e.g., median
stargazer(dt.groupon, type="text", median=TRUE)

#Package 'stargazer' also allows for other types of type:
#By specifying the 'out' argument, you'll get the relevant files containing the table
#in your working directory. You can then embed the table in your latex or Word editor.

#If you work with latex, you can output table in the 'latex' type
stargazer(dt.groupon, type="latex", median=TRUE, out="dt.groupon.summary.table.tex")

#If you work with Word, you can output table in the 'html' type and specify the output file
#with a .doc extension
stargazer(dt.groupon, type="html", median=TRUE, out="dt.groupon.summary.table.doc")


#Tabluate one quality variables
table(dt.groupon$ProductType)
table(dt.groupon$Login)
table(dt.groupon$Discount)

#Tabulate two qualitative variables (cross-classification table)

#'dataframe_name$variable_name': a common way to access individual variables of
#a data frame.

#With count as the cell value:
table(dt.groupon$ProductType, dt.groupon$Login)

#With proportion as cell value:
prop.table(table(dt.groupon$ProductType, dt.groupon$Login))

#Tabulate three qualitative variables:
table(dt.groupon$ProductType, dt.groupon$Login, dt.groupon$Discount)


#################################
#Creating Graphics 
#################################

#Basic plotting: Pie chart for one categorial variable
pie(table(dt.groupon$dGender), main='Gender Composition', labels=c('Male','Female'), 
    col=c('red', 'green'))

#Basic plotting: Bar chart for one categorical variable
barplot(table(dt.groupon$dGender), main='Gender Composition', names.arg=c('Male','Female'),
        col=c('red', 'green'))

#Basic plotting: Histogram for one numerical variable
hist(dt.groupon$Purchase, main='Histogram of purchase intention', col='green', breaks=10, 
     xlab='Likehood to purchase')

#Use the 'break' argument to adjust the number of bins
hist(dt.groupon$Purchase, main='Histogram of purchase intention', col='green', breaks=20, 
     xlab='Likehood to purchase')

#Basic plotting: Boxplot for one numerical variable
boxplot(dt.groupon$SatFac, main='Boxplot of study satisfaction', ylab='Study satisfaction')

#Basic plotting: Stacked or clustered barchart for two categorial variables
barplot(table(dt.groupon$dGender, dt.groupon$IBA), names.arg=c('Male','Female'), 
        col=c('darkblue','red'), legend=c('BA','IBA'))

barplot(table(dt.groupon$dGender, dt.groupon$IBA), names.arg=c('Male','Female'), 
        col=c('darkblue','red'), legend=c('BA','IBA'), beside=TRUE)
#: 'names.arg=c()' assigns different labels to different groups on x-axis
#  'col=c()' sets different colors for different categories within one stack or cluster;
#  'legend=c()' explains the meanings of different categories in a legend.
#Note that, in the examples above, the order of values in the 'c()' function is 
#consistent with the order of the values in the original variable.

##Basic plotting: scatterplot for two numerical variables
plot(dt.groupon$Purchase, dt.groupon$ShareLink, main='Purchase Intention vs. Share Intention', 
     pch=19, ylab='Likelihood to share', xlab='Likelihood to purchase')


##################################
#External plotting tool: ggplot2
##################################
#For first use, install the package first
install.packages("ggplot2")

#Load the package
library("ggplot2")

#Categorical data: Bar plot
#The 'factor()' function encodes a vector as a factor; or instruct
#R to treat 'Discount' as a factor (categorical variable)
dt.groupon$Discount <- factor(dt.groupon$Discount)

qplot(Discount, data=dt.groupon, geom="bar")

#Categorical data: Pie Chart
qplot(x="", fill=Discount, data=dt.groupon, geom="bar") + coord_polar(theta="y")

#Numerical data: Histogram
qplot(Purchase, data=dt.groupon, geom="histogram")
#Define binwidth (i.e., number of bins) yourself
qplot(Purchase, data=dt.groupon, geom="histogram", binwidth=0.5)
qplot(Purchase, data=dt.groupon, geom="histogram", binwidth=2)

#Encode IBA and dGender as factors
dt.groupon$IBA <- factor(dt.groupon$IBA)
dt.groupon$dGender <- factor(dt.groupon$dGender)

#Numerical data: Boxplot
qplot(x="", y=SatFac, data=dt.groupon, geom="boxplot")
#Boxplot by group defined by one variable
qplot(x=IBA, y=SatFac, data=dt.groupon, geom="boxplot")
#Boxplot by group defined by two variables
qplot(x=IBA, y=SatFac, fill=dGender, data=dt.groupon, geom="boxplot")

#Numerical variables: Scatter plot
qplot(Purchase, ShareLink, data=dt.groupon, geom="point")


##########################################
#Detecting and deal with outliers
##########################################

# We can use the 'boxplot()' function to obtain a boxplot 
# of a numerical variable, which can visualize outliers
# in terms of the numerical variable
boxplot(dt.groupon$SatFac, main="Boxplot of Study Satisfaction", 
        ylab="Study Satisfaction")

# The boxplot() function also identifies all values of outliers
# We cam extract the outliers and store them into the object: outlierSatFac
outlierSatFac <- boxplot(dt.groupon$SatFac)$out
# Print out the outlier values
outlierSatFac

#To obtain a new data frame without outliers, you can use the following 
#line of code:
# '%in%': value matching operator in R
dt.groupon.no.outliers <- dt.groupon[!(dt.groupon$SatFac %in% outlierSatFac), ]

# To see what '%in%' returns, try to run:
result_value_matching <- !(dt.groupon$SatFac %in% outlierSatFac)
View(result_value_matching)



